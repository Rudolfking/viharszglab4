package proto;

/**
 * Bankrabl√≥: nem tartja be a k√∂zleked√©si szab√°lyokat, a bankb√≥l pr√≥b√°l meg eljutni a rejtekhelyig.
 */
public class Robber extends Vehicle {
    private boolean isGoingForward;
    private int minimumInverseSpeed;
    private int maximumInverseSpeed; 
    
    final int default_godModeDuration = 5;
    
    protected int godModeDuration = default_godModeDuration;
    protected int godModeTicksLeft;

    public Robber(String name, Game game, Cell cell, int ispeed, Logger logger, CustomReader input) {
        super(name, game, cell, ispeed, logger, input);	
        preferredCell = 0;
        isGoingForward = true;	
        godModeTicksLeft = 0;        
    }

    /**
     * Sebess√©g n√∂vel√©se (ha m√©g lehet)
     */
    public void increaseSpeed() {
		if(inverseSpeed > minimumInverseSpeed)
			inverseSpeed--;
    }

    /**
     * Sebess√©g cs√∂kkent√©se (ha m√©g lehet)
     */
    public void decreaseSpeed() {        
		if(inverseSpeed < maximumInverseSpeed)
			inverseSpeed++;
    }

    /**
     * Halad√°si ir√°ny megford√≠t√°sa.
     */
    public void turnArround() {
        isGoingForward = !isGoingForward;
    }    

    /**
     * @param cIn
     * @param cOut
     * @return
     */
    protected Cell chooseFrom(Cell[] cIn, Cell[] cOut) {
		
		if (cell.getRoad() != null) {
			if (isGoingForward)
				return cOut[0];
			else
				return cIn[0];
		} else {
			if (preferredCell<cOut.length)
				return cOut[preferredCell];
			else
				return cIn[preferredCell-cOut.length];
		}		
    }

    /**
     * Elrejt≈ëz√©s a rejtekhelyen. A j√°t√©kos gy≈ëz.
     */
    public void hide() {
		INamedObject[] param = {this};   
		logger.logEvent("Robber $name hides",param);     
		game.winGame();		
    }

    /**
     * Rend≈ër letart√≥ztatja.
     */
    public void busted() {   		
		if (godModeTicksLeft <= 0) {
			die();				
			game.gameOver();
		}
    }
    
    /**
     * √útk√∂z√©s m√°s aut√≥val.
     */
    public void crash() {
		die();		
		game.gameOver();
	}

	/**
     * Minden √≥ral√©ptet√©skor v√©grehajtott f√ºggv√©ny: visszasz√°ml√°l k√©t l√©p√©s
	 * k√∂z√∂tt, √©s megpr√≥b√°l l√©pni, ha lej√°rt a sz√°ml√°l√≥.
     */
    public void tick() {  
						
		if (godModeTicksLeft > -1)	
			godModeTicksLeft--;	
		// ellen≈ërizz√ºk, hogy eltelt-e a m√°r a sebess√©gnek megfelel≈ë id≈ë        				
		// ha eltelt, megk√≠s√©rel√ºnk l√©pni
		if (((game != null) && (!game.speed)) || (ticksLeft==0)) {
			// sebess√©g-sz√°ml√°l√≥ √∫jraind√≠t√°sa
			ticksLeft = inverseSpeed;			
			// l√©p√©s megk√≠s√©rl√©se
			step();				
    	} 
    	else
    	if (ticksLeft>0)
			ticksLeft--;   	
		if (godModeTicksLeft==0) {
			INamedObject[] param = {this};
			logger.logEvent("Robber $name is no longer in GodMode",param);
		}
	}

	/**
	 * L√©p√©s a k√∂vektez≈ë cell√°ra.
	 */
	public void step() {
		
		// a k√∂vetkez≈ë cell√°k list√°j√°nak lek√©rdez√©se		
		Cell[] nextCells = cell.getNextCells();
		Cell[] prevCells = cell.getPreviousCells();		
		// a list√°b√≥l egy cella kiv√°laszt√°sa		
		Cell nextCell = chooseFrom(prevCells, nextCells);		
		// annak a vizsg√°lata, hogy a kiszemelt cell√°n tart√≥zkodik-e aut√≥		
		Vehicle v = nextCell.getVehicle();		
		// a kapott eredm√©ny elfogad√°sa		
		accept(nextCell,v);		
	}
	
	/**
	 * K√∂vetkez≈ë cell√°ra l√©p√©skor ez a f√ºggv√©ny a kiszemelt cella tartalma
	 * alapj√°n elind√≠tja az interakci√≥t, vagy a cell√°ra l√©p.
     *
     * @param nextCell a cella, ahova l√©pni szeretn√©nk
	 * @param v a j√°rm≈±, amit a cell√°t√≥l lek√©rdezt√ºnk
     */
	public void accept(Cell nextCell, Vehicle v) {
		// ha √ºres a cella, l√©phet
		if (v == null) {			
			cell.leave();						
			if (cell.getRoad() == null) {
				INamedObject[] param = {this};
				logger.logEvent("Robber $name moved to cell option " + Integer.toString(preferredCell),param);				
				isGoingForward = (preferredCell < cell.getNextCells().length);				
				preferredCell = 0;				
			} else {
				INamedObject[] param = {this};
				logger.logEvent("Robber $name moved to next cell",param);				
			}	
			nextCell.enter(this);					
		} else {
			v.interact(this);
		}
	}	
	/**
	 * 
	 * @param c Civillel interact
	 */
	public void interact(CivilCar c) {
	}

	/**
	 * 
	 * @param c Rendırrel
	 */
	public void interact(Policeman p) {
	}

	/**
	 * 
	 * @param c BankrablÛval
	 */
	public void interact(Robber r) {
	}

	/**
	 * 
	 * @param c Nyuszik·val
	 */
	public void interact(Bunny b) {
	}
	
	public void setGodModeDuration(int i) {
		godModeDuration = i;
	}
	
	public void startGodMode() {
		godModeTicksLeft = godModeDuration;
	}
	
	public boolean inGodMode() {
		return godModeTicksLeft > 0;
	}
}
